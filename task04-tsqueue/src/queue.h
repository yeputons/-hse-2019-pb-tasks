#ifndef QUEUE_H_
#define QUEUE_H_

extern "C" {

struct QueueNode;

/**
 * Opaque-структура, описывающая очередь: внутренности нельзя
 * использовать напрямую, только при помощи функцией queue_*().
 */
struct Queue {
    QueueNode *head, *last;
};

/**
 * Инициализирует очередь, лежащую по указателю `q`.
 * Если очередь по указателю `q` уже инициализирована, поведение не определено.
 * Очередь должна быть освобождена при помощи `queue_destroy`,
 * в противном случае возможны утечки ресурсов.
 */
void queue_init(Queue *q);

/**
 * Удаляет очередь, лежащую по указателю `q`, и освобождает
 * все связанные с ней ресурсы. Если очередь непуста,
 * поведение неопределено, так как в ней ещё могут лежат
 * произвольные ресурсы, которые очередь не в состоянии освободить.
 *
 * После удаления все операции с очередью, кроме `queue_init`, неопределены.
 */
void queue_destroy(Queue *q);

/**
 * Возвращает `true`, если очередь пуста, `false` иначе.
 */
bool queue_empty(Queue *q);

/**
 * Добавляет в очередь произвольный указатель `data`.
 */
void queue_push(Queue *q, void *data);

/**
 * Удаляет из очереди очередной элемент и возвращает его значение.
 * Если очередь пуста, поведение неопределено.
 */
void *queue_pop(Queue *q);
}

#endif
